# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type File {
  originalName: String!
  filename: String!
  path: String!
  url: String!
}

type Material {
  """Id"""
  _id: String!

  """Color"""
  color: String!

  """File"""
  texture: File!

  """Description"""
  description: String!
}

type Model {
  """Id"""
  _id: String!

  """Product's store"""
  mesh: File!

  """Product's store"""
  materials: [Material!]!
}

type Message {
  user: String!
  content: String!
}

type MessageEvent {
  conversation: String!
  message: Message!
}

type Conversation {
  """Id"""
  _id: String!
  seller: Store!
  client: Client!
  lastMessage: Message
  messages: [Message!]!
}

type User {
  _id: String!
  username: String!
  email: String!
  password: String!
  tel: Int!
  banned: Boolean!
  EmailConfirmation: Boolean!

  """Notification"""
  notification: Notification!

  """Conversations"""
  conversations: [Conversation!]!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ModelingReq {
  _id: String!
  dimensions: String!
  discription: String!
  model3D: File
  refrences: [File!]!
  status: String!
  createdAt: DateTime!
}

type Store {
  _id: String!
  username: String!
  email: String!
  password: String!
  tel: Int!
  banned: Boolean!
  EmailConfirmation: Boolean!

  """Notification"""
  notification: Notification!

  """Conversations"""
  conversations: [Conversation!]!
  createdAt: DateTime!
  documents: [File!]!

  """products"""
  products: [Product!]

  """Modeling requests"""
  requests: [ModelingReq!]

  """bundles"""
  bundles: [Bundle!]

  """orders"""
  orders: [Order!]

  """Reviews"""
  reviews: [Review!]!

  """Rating"""
  rating: Float!
  approved: Boolean!

  """Store's logo """
  logo: File!

  """Store's logo """
  subscribed: Boolean!
}

type Bundle {
  """Id of the bundle"""
  _id: String!

  """title of the bundle"""
  title: String!

  """Array of bundle's products"""
  products: [Product!]!

  """Bundle's store"""
  store: Store!

  """Price of the bundle"""
  price: Float!

  """Bundle rating"""
  rating: Float!

  """Reviews"""
  reviews: [Review!]!
}

type Review {
  """Id of the review"""
  _id: String!

  """Review's client"""
  client: Client!

  """Review's rating"""
  rating: Float!

  """Review's feedback"""
  feedback: String!

  """Review's feedback"""
  reviewing: Reviewable

  """Review's type of reported item"""
  type: String!

  """Review's type of reported item"""
  status: String!

  """Review's date"""
  createdAt: DateTime!
}

union Reviewable = Bundle | Store | Product

type Category {
  _id: String!
  name: String!
  image: File
  icon: File
  description: String
  status: String!
  products: [Product!]!
}

type Product {
  """Id"""
  _id: String!

  """Product name"""
  name: String!

  """Product price"""
  price: Float!

  """Product rating"""
  rating: Float!

  """Product description"""
  description: String!

  """Product's images"""
  images: [File!]!

  """Product's model"""
  model3d: Model

  """Product's category"""
  category: Category!

  """Product's store"""
  store: Store!

  """Reviews"""
  reviews: [Review!]!
  quantity: Int
  size: String
  weight: Float
  material: String
  available: Boolean!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Client {
  _id: String!
  username: String!
  email: String!
  password: String!
  tel: Int!
  banned: Boolean!
  EmailConfirmation: Boolean!

  """Notification"""
  notification: Notification!

  """Conversations"""
  conversations: [Conversation!]!
  createdAt: DateTime!
  orders: [Order!]
  watchlist: [Product!]!
  image: File!
}

type Order {
  _id: String!
  itemOrdred: OrderItem!
  item: OrderItem!
  type: String!
  client: Client!
  quantity: Int!
  status: String!
  reviewed: Boolean!
  material: Material
  createdAt: DateTime!
}

union OrderItem = Product | Bundle

type Notification {
  _id: String!
  events: [NotificationEvent!]
}

type NotificationEvent {
  message: String!
  type: String!
  item: Order!
}

type Admin {
  _id: String!
  username: String!
  email: String!
  password: String!
  tel: Int!
  banned: Boolean!
  EmailConfirmation: Boolean!

  """Notification"""
  notification: Notification!

  """Conversations"""
  conversations: [Conversation!]!
  createdAt: DateTime!
  role: String!
}

type AuthResponse {
  token: String!
  role: String!
  user: User!
}

type Report {
  _id: String!
  reporter: ReportParty!

  """Review's type of reported item"""
  reporterType: String!
  reported: ReportParty!

  """Review's type of reported item"""
  reportedType: String!
  reason: String!
}

union ReportParty = Client | Store

type Stat {
  totalOrders: Int!
  totalProducts: Int!
  totalReviews: Int!
  totalClients: Int!
  totalStores: Int!
}

type Query {
  mods: [Admin!]!
  clients: [Client!]!
  client(id: String!): Client!
  CurrentClient: Client!
  watchlist: [String!]!
  getNotification: Notification!
  stores: [Store!]!
  storesAll: [Store!]!
  store(id: String!): Store!
  currentStore: Store!
  approvedProduct: Store!
  products: [Product!]!
  allProducts: [Product!]!
  product(id: String!): Product
  productForInvetory(id: String!): Product
  productForAdmin(id: String!): Product
  searchProducts(searchProductInput: SearchProductInput!): [Product!]!
  bestSelling: [Product!]!
  categories: [Category!]!
  categoriesAdmin: [Category!]!
  category(id: String!): Category!
  AllCategories: [Category!]!
  discover: [Category!]!
  orders: [Order!]!
  order(id: String!): Order!
  myOrders: [Order!]!
  bundles: [Bundle!]!
  bundle(id: String!): Bundle!
  reviews: [Review!]!
  review(id: String!): Review!
  reports: [Report!]!
  report(id: String!): Report!
  materials: [Material!]!
  material(id: String!): Material!
  model(id: String!): Model!
  conversation(id: String!): Conversation
  modelingReqs: [ModelingReq!]!
  stats: Stat!
}

input SearchProductInput {
  """Query in Product's name"""
  name: String

  """Product min price"""
  minPrice: Float = 0.01

  """Product max price"""
  maxPrice: Float = 10000000.01

  """Product's category"""
  category: String

  """Product's store"""
  store: String
}

type Mutation {
  banToggel(email: String!): User!
  updateProfile(UpdateUserInput: UpdateUserInput!): User!
  addMod(CreateModInput: CreateModInput!): User!
  createClient(createClientInput: CreateClientInput!): Client!
  updateClient(updateClientInput: UpdateClientInput!): Client!
  removeClient(id: String!): Client!
  createStore(createStoreInput: CreateStoreInput!): Store!
  updateStore(updateStoreInput: UpdateStoreInput!): Store!
  removeStore(id: String!): Store!
  approveStore(id: String!): Store!
  subscribeToPremium: Store!
  login(authInfo: AuthInfo!): AuthResponse
  signupStore(informations: CreateStoreInput!): User!
  signupClient(informations: CreateClientInput!): User!
  activateAccount(code: String!, email: String!): String!
  createProduct(createProductInput: CreateProductInput!): Product!
  changeProductStatus(operation: Boolean!, id: String!): Product!
  updateProduct(updateProductInput: UpdateProductInput!): Product!
  removeProduct(id: String!): Product!
  addToWatchlist(id: String): Product!
  removeFromWatchlist(id: String!): Product!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  requestCategory(name: String!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: String!): Category!
  approveCategory(id: String!): Category!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  removeOrder(id: String!): Order!
  cancelOrder(id: String!): Order!
  approveOrder(id: String!): Order!
  createBundle(createBundleInput: CreateBundleInput!): Bundle!
  updateBundle(updateBundleInput: UpdateBundleInput!): Bundle!
  removeBundle(id: String!): Bundle!
  createReviewStore(createReviewInput: CreateReviewInput!): Review!
  createReviewProduct(createReviewInput: CreateReviewInput!): Review!
  createReviewBundle(createReviewInput: CreateReviewInput!): Review!
  createReview(createReviewInput: CreateReviewInput!): Review!
  updateReview(updateReviewInput: UpdateReviewInput!): Review!
  removeReview(id: String!): Review!
  approveReview(id: String!): Review!
  declineReview(id: String!): Review!
  createReport(createReportInput: CreateReportInput!): Report!
  updateReport(updateReportInput: UpdateReportInput!): Report!
  removeReport(id: String!): Report!
  createMaterial(createMaterialInput: CreateMaterialInput!): Material!
  updateMaterial(updateMaterialInput: UpdateMaterialInput!): Material!
  removeMaterial(id: String!): Material!
  createModel(createModelInput: CreateModelInput!): Model!
  updateModel(updateModelInput: UpdateModelInput!): Model!
  removeModel(id: String!): Model!
  sendMessage(MessageConversationInput: MessageConversationInput!): Conversation!
  createModelingReq(createModelingReqInput: CreateModelingReqInput!): ModelingReq!
  approveModelingReq(updateModelingReqInput: ApproveModelingReqInput!): ModelingReq!
  declineModelingReq(id: String!): ModelingReq!
  removeModelingReq(id: String!): ModelingReq!
}

input UpdateUserInput {
  username: String
  tel: Int
  image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateModInput {
  email: String!
  password: String!
  username: String!
}

input CreateClientInput {
  email: String!
  password: String!
  tel: Int!
  username: String!
  files: [Upload!]
  image: Upload!
}

input UpdateClientInput {
  email: String
  password: String
  tel: Int
  username: String
  files: [Upload!]
  image: Upload
  id: String!
}

input CreateStoreInput {
  email: String!
  password: String!
  tel: Int!
  username: String!
  files: [Upload!]
  image: Upload!
}

input UpdateStoreInput {
  email: String
  password: String
  tel: Int
  username: String
  files: [Upload!]
  image: Upload
  id: String!
}

input AuthInfo {
  email: String!
  password: String!
}

input CreateProductInput {
  """Product name"""
  name: String!

  """Product price"""
  price: Float!

  """Product description"""
  description: String!

  """Product's images"""
  images: [Upload!]!

  """Product's categroy"""
  category: String!
  size: String!
  quantity: Int
  weight: Float!
  material: String!
}

input UpdateProductInput {
  """Product name"""
  name: String

  """Product price"""
  price: Float

  """Product description"""
  description: String

  """Product's images"""
  images: [Upload!]

  """Product's categroy"""
  category: String
  size: String
  quantity: Int
  weight: Float
  material: String
  id: String!
  deletedImages: [Int!]
}

input CreateCategoryInput {
  name: String!
  description: String!
  image: Upload!
  icon: Upload!
}

input UpdateCategoryInput {
  id: String!
  name: String!
  description: String!
  image: Upload
  icon: Upload
}

input CreateOrderInput {
  product: String!
  material: String = null
  quantity: Int = 1
}

input UpdateOrderInput {
  product: String
  material: String = null
  quantity: Int = 1
  id: String!
}

input CreateBundleInput {
  """title of the bundle"""
  title: String!

  """Array of bundle's products"""
  products: [String!]!

  """Price of the bundle"""
  price: Float!
}

input UpdateBundleInput {
  """Id of the bundle"""
  id: String!

  """title of the bundle"""
  title: String

  """Price of the bundle"""
  price: Float
}

input CreateReviewInput {
  """Review's rating"""
  rating: Float!

  """Review's feedback id"""
  feedback: String!

  """Reviewable Id"""
  reviewingId: String!
}

input UpdateReviewInput {
  """Review's rating"""
  rating: Float

  """Review's feedback id"""
  feedback: String

  """Reviewable Id"""
  reviewingId: String
  id: String!
}

input CreateReportInput {
  """Reported Email"""
  reported: String!

  """Reporting reason"""
  reason: String!
}

input UpdateReportInput {
  """Reported Email"""
  reported: String

  """Reporting reason"""
  reason: String
  id: String!
}

input CreateMaterialInput {
  product: String!
  model: String!
  color: String!
  description: String!
  texture: Upload!
}

input UpdateMaterialInput {
  product: String
  model: String
  color: String
  description: String
  texture: Upload
  id: String!
}

input CreateModelInput {
  product: String!
  mesh: Upload!
}

input UpdateModelInput {
  product: String
  mesh: Upload!

  """Id"""
  productId: String!

  """Id"""
  id: String!
}

input MessageConversationInput {
  to: String!
  message: String!
}

input CreateModelingReqInput {
  dimensions: String!
  discription: String!
  refrences: [Upload!]!
}

input ApproveModelingReqInput {
  id: String!
  file: Upload!
}

type Subscription {
  notificationAdded: NotificationEvent!
  adminNotification: NotificationEvent!
  newConversation: Conversation!
  newMessage: MessageEvent!
}
